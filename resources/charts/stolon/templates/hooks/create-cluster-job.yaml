{{ if and .Release.IsInstall .Values.job.autoCreateCluster }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "stolon.fullname" . }}-create-cluster
  labels:
    app: {{ template "stolon.name" . }}
    chart: {{ template "stolon.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: {{ template "stolon.fullname" . }}
        release: {{ .Release.Name }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ template "stolon.serviceAccountName" . }}
  {{- if eq .Values.store.backend "etcdv2" "etcdv3" }}
      initContainers:
        - name: {{ .Chart.Name }}-etcd-wait
          image: "{{ .Values.etcdImage.repository }}:{{ .Values.etcdImage.tag }}"
          imagePullPolicy: {{ .Values.etcdImage.pullPolicy }}
          command: ["/usr/bin/dumb-init", "--", "/bin/sh", "-exc"]
          args:
            - |
              export GATEWAY_ENDPOINTS=${NODE_NAME}:2379
              /usr/bin/etcd gateway start --endpoints=$GATEWAY_ENDPOINTS --listen-addr=127.0.0.1:2379 --trusted-ca-file={{ .Values.store.caFile }} &
              while ! etcdctl endpoint status --cluster | grep true; do sleep 1 && echo -n "Waiting for etcd..."; done
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: ETCDCTL_API
              value: "3"
            - name: ETCDCTL_ENDPOINTS
              value: {{ .Values.store.endpoints | quote }}
            {{- if not (empty .Values.store.caFile) }}
            - name: ETCDCTL_CACERT
              value: {{ .Values.store.caFile | quote }}
            {{- end }}
            {{- if not (empty .Values.store.key) }}
            - name: ETCDCTL_KEY
              value: {{ .Values.store.key | quote }}
            {{- end }}
            {{- if not (empty .Values.store.certFile) }}
            - name: ETCDCTL_CERT
              value: {{ .Values.store.certFile | quote }}
            {{- end }}
          volumeMounts:
            - name: etcd-secrets
              mountPath: /home/stolon/secrets/etcd
  {{- end }}
      containers:
        - name: {{ template "stolon.fullname" . }}-create-cluster
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/usr/bin/dumb-init", "--", "/bin/bash", "-exc"]
          args:
            - |
              export GATEWAY_ENDPOINTS=${NODE_NAME}:2379
              /usr/bin/etcd gateway start --endpoints=$GATEWAY_ENDPOINTS --listen-addr=127.0.0.1:2379 --trusted-ca-file={{ .Values.store.caFile }} &
              while ! etcdctl endpoint status --cluster | grep true; do sleep 1 && echo -n "Waiting for etcd..."; done
              stolonctl init --yes \
              '{ "initMode": "new", {{- range $key, $value := .Values.clusterSpec }} {{ $key | quote }}: {{ if typeIs "string" $value }} {{ $value | quote }} {{ else if typeIs "bool"  $value }} {{ $value }} {{ else }} {{ int $value }} {{ end }}, {{- end }} "pgParameters": {{ toJson .Values.pgParameters }} }'
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: STOLONCTL_CLUSTER_NAME
              value: {{ template "stolon.clusterName" . }}
            - name: STOLONCTL_STORE_BACKEND
              value: {{ .Values.store.backend | quote }}
            {{- if eq .Values.store.backend "kubernetes" }}
            - name: STOLONCTL_KUBE_RESOURCE_KIND
              value: {{ .Values.store.kubeResourceKind  | quote }}
            {{- else }}
            - name: STOLONCTL_STORE_ENDPOINTS
              value: {{ .Values.store.endpoints | quote }}
            {{- end }}
            {{- if not (empty .Values.store.caFile) }}
            - name: STOLONCTL_STORE_CA_FILE
              value: {{ .Values.store.caFile | quote }}
            {{- end }}
            {{- if not (empty .Values.store.certFile) }}
            - name: STOLONCTL_STORE_CERT_FILE
              value: {{ .Values.store.certFile | quote }}
            {{- end }}
            {{- if not (empty .Values.store.key) }}
            - name: STOLONCTL_STORE_KEY
              value: {{ .Values.store.key | quote }}
            {{- end }}
            - name: ETCDCTL_API
              value: "3"
            - name: ETCDCTL_ENDPOINTS
              value: {{ .Values.store.endpoints }}
            {{- if not (empty .Values.store.caFile) }}
            - name: ETCDCTL_CACERT
              value: {{ .Values.store.caFile | quote }}
            {{- end }}
            {{- if not (empty .Values.store.key) }}
            - name: ETCDCTL_KEY
              value: {{ .Values.store.key | quote }}
            {{- end }}
            {{- if not (empty .Values.store.certFile) }}
            - name: ETCDCTL_CERT
              value: {{ .Values.store.certFile | quote }}
            {{- end }}
          volumeMounts:
            - name: etcd-secrets
              mountPath: /home/stolon/secrets/etcd
      volumes:
        - name: etcd-secrets
          hostPath:
            path: /var/state
{{ end }}

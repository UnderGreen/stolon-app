# Default values for stolon.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: sorintlab/stolon
  tag: v0.13.0-pg10
  pullPolicy: IfNotPresent

etcdImage:
  repository: k8s.gcr.io/etcd-amd64
  tag: 2.3.7
  pullPolicy: IfNotPresent

telegrafImage:
  repository: telegraf
  tag: 1.12-alpine
  pullPolicy: IfNotPresent

pgbouncerImage:
  repository: edoburu/pgbouncer
  tag: 1.8.1
  pullPolicy: IfNotPresent

debug: false

rbac:
  create: true

serviceAccount:
  create: true
  # The name of the ServiceAccount to use. If not set and create is true, a name is generated using the fullname template
  name:

# # Use existing secret (ignores superuser and replication passwords)
# existingSecret:

superuser:
  username: stolon
  password:
  ## Option to force users to specify a password. That is required for 'helm upgrade' to work properly.
  ## If it is not force, a random password will be generated.
  forcePassword: false

replication:
  username: repluser
  password:
  ## Option to force users to specify a password. That is required for 'helm upgrade' to work properly.
  ## If it is not force, a random password will be generated.
  forcePassword: false

# backend could be one of the following: consul, etcdv2, etcdv3 or kubernetes
store:
  backend: etcdv3
  endpoints: "http://127.0.0.1:2379"

job:
  autoCreateCluster: true
  autoUpdateClusterSpec: true

clusterSpec: {}
  # sleepInterval: 5s
  # requestTimeout: 10s
  # failInterval: 20s
  # deadKeeperRemovalInterval: 48h
  # maxStandbys: 5

pgParameters: {}
  # maxConnections: 1000

ports:
  stolon:
    containerPort: 5432
  metrics:
    containerPort: 8080

telegraf:
  config:
    agent:
      interval: "20s"
      round_interval: true
      metric_batch_size: 1000
      metric_buffer_limit: 10000
      collection_jitter: "0s"
      flush_interval: "10s"
      flush_jitter: "0s"
      precision: ""
      debug: false
      quiet: false
      logfile: ""
      hostname: "$HOSTNAME"
      omit_hostname: false
    outputs:
      - influxdb:
          urls:
            - "http://influxdb.monitoring.svc.cluster.local:8086"
          database: "k8s"
          retention_policy: ""
          write_consistency: "any"
          timeout: "5s"
          username: "$INFLUXDB_USERNAME"
          password: "$INFLUXDB_PASSWORD"
    inputs:
      - postgresql:
          address: "host=stolon-postgres user=$STOLON_USERNAME password=$STOLON_PASSWORD dbname=postgres sslmode=require"
          ignored_databases:
            - "template0"
            - "template1"

sentinel:
  replicaCount: 2
  affinity: {}
  volumeMounts:
    - name: etcd-secrets
      mountPath: /var/state
  volumes:
    - name: etcd-secrets
      hostPath:
        path: /var/state

keeper:
  dataDir: "/stolon-data"
  uid_prefix: "keeper"
  replicaCount: 2
  service:
    type: ClusterIP
    ports:
      keeper:
        port: 5432
        targetPort: 5432
        protocol: TCP
  nodeSelector: {}
  initVolumeMounts:
    - name: data
      mountPath: /stolon-data
  etcdVolumeMounts:
    - name: etcd-secrets
      mountPath: /var/state
  volumeMounts:
    - name: data
      mountPath: /stolon-data
    - name: etcd-secrets
      mountPath: /var/state
  volumes:
    - name: etcd-secrets
      hostPath:
        path: /var/state
    - name: data
      hostPath:
        path: /var/lib/data/stolon

proxy:
  replicaCount: 2
  affinity: {}
  service:
    type: ClusterIP
#    loadBalancerIP: ""
    ports:
      proxy:
        port: 5432
        targetPort: 5432
        protocol: TCP
  volumeMounts:
    - name: etcd-secrets
      mountPath: /var/state
  volumes:
    - name: etcd-secrets
      hostPath:
        path: /var/state

pgbouncer:
  replicaCount: 2
  affinity: {}

pgbouncerConfig:
  maxClientConnections: 100
  serverTLSMode: require
  serverTLSCertFile: /home/stolon/secrets/pgbouncer.pem
  serverTLSKeyFile: /home/stolon/secrets/pgbouncer-key.pem
